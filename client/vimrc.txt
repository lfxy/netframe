"vundle{{{
set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'kien/ctrlp.vim'
Bundle 'tacahiroy/ctrlp-funky'
Plugin 'rking/ag.vim'
Plugin 'supertab'
Plugin 'majutsushi/tagbar'
Plugin 'a.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
"Plugin 'vimcdoc'
Plugin 'easymotion/vim-easymotion'
Plugin 'colorselector'
Plugin 'asins/vimcdoc'
"Plugin 'Tabular'
"Plugin 'EasyMotion'
"Plugin 'cscope.vim'
"Plugin 'CCTree'
"Plugin 'c.vim'
"Plugin 'The-NERD-tree'
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'tpope/vim-surround'
"Plugin 'Shougo/neocomplete.vim'

"Not sure to install such package, did I need it?
"Plugin 'scrooloose/syntastic'
"Plugin 'myusuf3/numbers.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
"filetype plugin indent on    " required

" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
" }}}
"general{{{
let mapleader = ","
"filetype plugin on

syntax on " 自动语法高亮
colorscheme desert "darkblue "zellner evening darkblue murphy morning 
"syntax enable
"set background=light
"colorscheme solarized

set number " 显示行号
set ruler " 打开状态栏标尺
set shiftwidth=4 " 设定 << 和 >> 命令移动时的宽度为 4
set expandtab "tab变为空格
set softtabstop=4 " 使得按退格键时可以一次删掉 4 个空格
set tabstop=4 	" 设定 tab 长度为 4
set nowrapscan " 禁止在搜索到文件两端时重新搜索
set incsearch " 输入搜索内容时就显示搜索结果
set ignorecase		"搜索忽略大小写
set hlsearch " 搜索时高亮显示被找到的文本
set showmatch " 插入括号时，短暂地跳转到匹配的对应括号
set matchtime=2 " 短暂跳转到匹配括号的时间
set magic 		" 设置魔术
set smartindent " 开启新行时使用智能自动缩进
set laststatus=2 " 显示状态栏 (默认值为 1, 无法显示状态栏)
set foldmethod=marker " 设置语法折叠 /marker,indent,diff,syntax 
set encoding=utf-8
set termencoding=utf-8
set fencs=utf-8,gb18030,gbk,gb2312
set statusline=%F%m%r%h%w\ [POS=%l,%v][%p%%]
map <C-i> I<Esc>
map to o<Esc>
imap <M-space> <Esc>

set cursorline " 突出显示当前行
hi CursorColumn cterm=NONE ctermbg=red ctermfg=white guibg=NONE guifg=NONE
highlight CursorLine term=bold,reverse cterm=bold,reverse ctermbg=black
set nocursorcolumn
set history=500
set showcmd
autocmd! bufwritepost ~/.vimrc source ~/.vimrc
set t_Co=256
set linebreak
set hls
set clipboard+=unnamed "共享剪贴板  
set autowrite	"自动保存
set autoindent		" 自动缩进
set cindent			" 使用C样式的缩进
set gdefault		"行内替换
set langmenu=zh_CN.UTF-8		"语言设置
set helplang=cn

set backspace=indent,eol,start
set whichwrap+=<,>,h,l		" 允许backspace和光标键跨越行边界
set viminfo='1000
set wildmenu
let helptags=$VIM."/vimfiles/doc"
set helplang=cn
"set autochdir " 自动切换当前目录为当前文件所在的目录
""imap jj <Esc>

"set cmdheight=1 " 设定命令行的行数为 1
"set nobackup " 覆盖文件时不备份
"filetype on  
"filetype plugin on
"filetype indent on 
"set backupcopy=yes " 设置备份时的行为为覆盖
"set noerrorbells " 关闭错误信息响铃
"set novisualbell " 关闭使用可视响铃代替呼叫
"set t_vb= " 置空错误铃声的终端代码
"todo"set hidden " 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存
"set guioptions-=T 	" 隐藏工具栏
"set guioptions-=m 	" 隐藏菜单栏
"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}   "状态行显示的内容  
"todo"set foldenable		 " 开始折叠
"set foldcolumn=1 " 设置折叠区域的宽度
"setlocal foldlevel=2 " 设置折叠层数为
"set foldclose=all " 设置为自动关闭折叠 
"todo"set guifont=Courier_New:h10:cANSI   " 设置字体  
"todo"set formatoptions+=mM
"todo"set fileencodings=ucs-bom,utf-8,cp936
"if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
"set ambiwidth=double
"endif

"todo"let s:PlugWinSize = 35
"map tt o<Esc>

"todo"set selection=exclusive
"todo"set selectmode=mouse,key
"todo"set report=0		" 通过使用: commands命令，告诉我们文件的哪一行被改变过

"todo"set fillchars=vert:\ ,stl:\ ,stlnc:\		" 在被分割的窗口间显示空白，便于阅读


"function! CurDir()
"    let curdir = substitute(getcwd(), '/root',"~/","g")
"    return curdir
"endfunction
"set statusline=\ %f%m%r%h\ %w\ %<CWD:\ %{CurDir()}\ %=Pos:\ %l/%L:%c\ %p%%\

"}}}
"about tab{{{
nnoremap tn :tabnext<cr>
nnoremap tp :tabprevious<cr>
nnoremap te :tabedit
nnoremap tc :tabclose<cr>
nnoremap tr :tabnew<space>

nnoremap cd :cd<space>
"}}}
"ctrlP{{{ 
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'a'
let g:ctrlp_custom_ignore = {
    \ 'dir': '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$'
    \}

let g:ctrlp_open_new_file = 'v'
"let g:ctrlp_map = '<leader>p'
"let g:ctrlp_match_window_bottom=1
"let g:ctrlp_max_height=15
"let g:ctrlp_match_window_reversed=0
"let g:ctrlp_mruf_max=500
"let g:ctrlp_follow_symlinks=1
"}}}
"ctrlp-funky{{{
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1

let g:ctrlp_extensions = ['funky']
"}}}
"Ag{{{
let g:ag_prg="ag --vimgrep --smart-case"
let g:ag_working_path_mode='r'
let g:ag_apply_lmappings=0
let g:ag_highlight=1

map <leader>g :Ag<space>
"}}}
"ctags{{{
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
set tags=tags;
"}}}
"tagbar{{{
let g:tagbar_ctags_bin = '/usr/bin/ctags'
nmap <leader>t :TagbarToggle<CR>
"nmap <leader>r :TagbarOpen fj<CR>
let g:tagbar_width = 30
let g:tagbar_autofocus = 0
let g:tagbar_show_linenumbers = 1
let g:tagbar_sort = 0
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1
"todo"let g:tagbar_autoshowtag = 1
"todo"let g:tagbar_autopreview = 1
"todo"autocmd VimEnter * nested :TagbarOpen
"}}}
"nerdtree{{{
map <leader>r :NERDTreeToggle<CR>

" to close the whole workspace if the NERDTree is the last windows
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeShowBookmarks=1
let NERDTreeChDirMode=2
let g:NERDTreeDirArrowExpandable = '>'
let g:NERDTreeDirArrowCollapsible = '<'
let g:NERDTreeAutoCenter = 1
let g:NERDTreeHighlightCursorline = 1
let NERDTreeShowLineNumbers=1
"}}}
"easymotion{{{
let g:EasyMotion_leader_key = '<Leader>'
"map <Leader>j <Plug>(easymotion-j)
"map <Leader>k <Plug>(easymotion-k)
"nmap s <Plug>(easymotion-overwin-f)
"}}}
"auto complete{{{
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {<CR>}<ESC>O
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i

function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endfunction

set nocp
set completeopt=longest,menu
let g:SuperTabRetainCompletionType=2
let g:neocomplete#enable_at_startup = 1
"}}}
"locate last cursor location{{{
if has("autocmd")
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif
endif
"}}}
"others{{{
set showcmd
set listchars=tab:>-,trail:-,eol:$
set showmode
map <F9> :set paste<CR>
map <F10> :set nopaste<CR>
set ai
set si
let NERDSpaceDelims=1 " 让注释符与语句之间留一个空格
let g:checksyntax_auto = 0 " 不自动检查

"swich windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
"nnoremap <C-c> <C-w>c
"nnoremap <C-o> <C-w>o
"let g:CCTreeCscopeDb = "cscope.out"
"let g:CCTreeRecursiveDepth = 3
"let g:CCTreeOrientation = "leftabove"
"}}}
"------------------------------------------------
"leader{{{
"nnoremap <Leader>fu :CtrlPFunky<Cr>
"map  <Leader>f <Plug>(easymotion-bd-f)
"nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
"map <leader>g :Ag<space>
"nmap <leader>t :TagbarToggle<CR>
"""nmap <leader>w :WMToggle<cr>
"map <leader>r :NERDTreeToggle<CR>

"nnnoremap <C-h> <C-w>h
"nnnoremap <C-j> <C-w>j
"nnnoremap <C-k> <C-w>k
"nnnoremap <C-l> <C-w>l
"nnnoremap <C-c> <C-w>c
"nnnoremap <C-o> <C-w>o
"map to o<Esc>
"}}}
"unused{{{
"-----------------------------------------------------------------
" plugin - NeoComplCache.vim 自动补全插件
"-----------------------------------------------------------------
"let g:AutoComplPop_NotEnableAtStartup = 1
"let g:NeoComplCache_EnableAtStartup = 1
"let g:NeoComplCache_SmartCase = 1
"let g:NeoComplCache_TagsAutoUpdate = 1
"let g:NeoComplCache_EnableInfo = 1
"let g:NeoComplCache_EnableCamelCaseCompletion = 1
"let g:NeoComplCache_MinSyntaxLength = 3
"let g:NeoComplCache_EnableSkipCompletion = 1
"let g:NeoComplCache_SkipInputTime = '0.5'
"let g:NeoComplCache_SnippetsDir = $VIMFILES.'/snippets'
"inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
"imap <silent> <C-e> <Plug>(neocomplcache_snippets_expand)
"smap <silent> <C-e> <Plug>(neocomplcache_snippets_expand)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"一些不错的映射转换语法（如果在一个文件中混合了不同语言时有用）
"nnoremap <leader>1 :set filetype=xhtml<CR>
"nnoremap <leader>2 :set filetype=css<CR>
"nnoremap <leader>3 :set filetype=javascript<CR>
"nnoremap <leader>4 :set filetype=php<CR>

" set fileformats=unix,dos,mac
" nmap <leader>fd :se fileformat=dos<CR>
" nmap <leader>fu :se fileformat=unix<CR>

" use Ctrl+[l|n|p|cc] to list|next|previous|jump to count the result
" map <C-x>l <ESC>:cl<CR>
" map <C-x>n <ESC>:cn<CR>
" map <C-x>p <ESC>:cp<CR>
" map <C-x>c <ESC>:cc<CR>

" 映射全选+复制 ctrl+a
"map <C-A> ggVGY
"map! <C-A> <Esc>ggVGY
"map <F12> gg=G
" 选中状态下 Ctrl+c 复制
"map! <C-c> "+y
"nnoremap <F2> :g/^\s*$/d<CR>  "去空行  
"}}}
"Taglist{{{
"let Tlist_Show_One_File = 1 " 不同时显示多个文件的tag，只显示当前文件的
"let Tlist_Exit_OnlyWindow = 1 " 如果taglist窗口是最后一个窗口，则退出vim
"let Tlist_Use_Right_Window = 1 " 在右侧窗口中显示taglist窗口
"let Tlist_File_Fold_Auto_Close=2 " 自动折叠当前非编辑文件的方法列表
"let Tlist_Auto_Open = 0			"czq
"let Tlist_Auto_Update = 1
"let Tlist_Hightlight_Tag_On_BufEnter = 1
"let Tlist_Enable_Fold_Column = 1
"let Tlist_Process_File_Always = 1
"let Tlist_Display_Prototype = 0
"let Tlist_Compact_Format = 1

"map <leader>t :TlistToggle<cr>
"}}}
"winmanager{{{ 
"let g:miniBufExplMapWindowNavVim = 1
"let g:miniBufExplMapWindowNavArrows = 1
"let g:miniBufExplMapCTabSwitchBufs = 1
"let g:miniBufExplModSelTarget = 1
"let g:winManagerWidth = 40

"let g:winManagerWindowLayout='FileExplorer,TagList'
"nmap <leader>w :WMToggle<cr>
"}}}

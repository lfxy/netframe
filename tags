!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddReadFd	pollingserver.cpp	/^void PollingServer::AddReadFd(int epollfd, int fd)$/;"	f	class:PollingServer
BUFFER_SIZE	pollingserver.cpp	20;"	d	file:
CXX	Makefile	/^CXX = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -Wall -g$/;"	m
CXXLDFLAGS	Makefile	/^CXXLDFLAGS = -lpthread$/;"	m
CXXPPFLAGS	Makefile	/^CXXPPFLAGS :=$/;"	m
ConvertToString	pollingserver.h	/^    class ConvertToString$/;"	c	class:PollingServer
DIRS	Makefile	/^DIRS :=.$/;"	m
EndRecord	timestamp.h	/^    void EndRecord()$/;"	f	class:timeStamp
FILES	Makefile	/^FILES = $(foreach dir, $(DIRS), $(wildcard $(dir)\/*.cpp))$/;"	m
GetString	pollingserver.h	/^        std::string& GetString(T& src)$/;"	f	class:PollingServer::ConvertToString
GetTime	timestamp.h	/^    long GetTime()$/;"	f	class:timeStamp
Init	pollingserver.cpp	/^void PollingServer::Init(std::string& name, std::string ip, int port)$/;"	f	class:PollingServer
LIBDIRS	Makefile	/^LIBDIRS :=$/;"	m
LtModel	pollingserver.cpp	/^void PollingServer::LtModel(epoll_event* events, int number, int epollfd, int listenfd)$/;"	f	class:PollingServer
MAX_EVENT_NUMBER	main.cpp	17;"	d	file:
MAX_EVENT_NUMBER	pollingserver.cpp	19;"	d	file:
ModReadFd	pollingserver.cpp	/^void PollingServer::ModReadFd(int epollfd, int fd)$/;"	f	class:PollingServer
ModWriteFd	pollingserver.cpp	/^void PollingServer::ModWriteFd(int epollfd, int fd)$/;"	f	class:PollingServer
OBJS	Makefile	/^OBJS = $(patsubst %.cpp, %.o, $(FILES))$/;"	m
PollingServer	pollingserver.cpp	/^PollingServer::PollingServer()$/;"	f	class:PollingServer
PollingServer	pollingserver.h	/^class PollingServer$/;"	c
RM	Makefile	/^RM := rm$/;"	m
Release	pollingserver.cpp	/^void PollingServer::Release()$/;"	f	class:PollingServer
Run	pollingserver.cpp	/^void PollingServer::Run()$/;"	f	class:PollingServer
StartRecord	timestamp.h	/^    void StartRecord()$/;"	f	class:timeStamp
TARGET	Makefile	/^TARGET = myprocess$/;"	m
VPATH	Makefile	/^VPATH =.$/;"	m
_POLLING_SERVER_H_	pollingserver.h	2;"	d
m_convertStr	pollingserver.h	/^    ConvertToString m_convertStr;$/;"	m	class:PollingServer
m_convertTime	pollingserver.h	/^    timeStamp* m_convertTime;$/;"	m	class:PollingServer
m_end	timestamp.h	/^    long m_end;$/;"	m	class:timeStamp
m_fileFd	pollingserver.h	/^    FILE* m_fileFd;$/;"	m	class:PollingServer
m_fileTime	pollingserver.h	/^    timeStamp* m_fileTime;$/;"	m	class:PollingServer
m_getCurrentTime	pollingserver.cpp	/^char* PollingServer::m_getCurrentTime(std::string& id)$/;"	f	class:PollingServer
m_interval	timestamp.h	/^    long m_interval;$/;"	m	class:timeStamp
m_key	pollingserver.h	/^    std::string m_key;$/;"	m	class:PollingServer
m_logBuf	pollingserver.h	/^    char* m_logBuf;$/;"	m	class:PollingServer
m_name	timestamp.h	/^    std::string m_name;$/;"	m	class:timeStamp
m_readTime	pollingserver.h	/^    timeStamp* m_readTime;$/;"	m	class:PollingServer
m_running	pollingserver.h	/^    bool m_running;$/;"	m	class:PollingServer
m_sendTime	pollingserver.h	/^    timeStamp* m_sendTime;$/;"	m	class:PollingServer
m_servicName	pollingserver.h	/^    std::string m_servicName;$/;"	m	class:PollingServer
m_serviceIp	pollingserver.h	/^    std::string m_serviceIp;$/;"	m	class:PollingServer
m_serviceKey	pollingserver.h	/^    std::map<std::string, int> m_serviceKey;$/;"	m	class:PollingServer
m_servicePort	pollingserver.h	/^    int m_servicePort;$/;"	m	class:PollingServer
m_setNonblocking	pollingserver.cpp	/^int PollingServer::m_setNonblocking(int fd)$/;"	f	class:PollingServer
m_start	timestamp.h	/^    long m_start;$/;"	m	class:timeStamp
m_strDec	pollingserver.h	/^        std::string m_strDec;$/;"	m	class:PollingServer::ConvertToString
m_strStream	pollingserver.h	/^        std::stringstream m_strStream;$/;"	m	class:PollingServer::ConvertToString
m_strTime	pollingserver.h	/^    std::string m_strTime;$/;"	m	class:PollingServer
m_time	timestamp.h	/^    int m_time;$/;"	m	class:timeStamp
m_timeCheck	pollingserver.h	/^    int m_timeCheck;$/;"	m	class:PollingServer
m_tt	timestamp.h	/^    struct timeval m_tt;$/;"	m	class:timeStamp	typeref:struct:timeStamp::timeval
main	main.cpp	/^int main(int argc, char** argv)$/;"	f
timeStamp	timestamp.h	/^    timeStamp(std::string name)$/;"	f	class:timeStamp
timeStamp	timestamp.h	/^class timeStamp$/;"	c
~PollingServer	pollingserver.cpp	/^PollingServer::~PollingServer()$/;"	f	class:PollingServer
~timeStamp	timestamp.h	/^    ~timeStamp(){}$/;"	f	class:timeStamp
